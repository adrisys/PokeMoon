// <auto-generated />
using ApiPokemon.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiPokemon.Migrations
{
    [DbContext(typeof(PokemonContext))]
    [Migration("20240430122257_SincronizarBaseDeDatos")]
    partial class SincronizarBaseDeDatos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AbilityPokemon", b =>
                {
                    b.Property<int>("IDpoke")
                        .HasColumnType("int");

                    b.Property<int>("IDability")
                        .HasColumnType("int");

                    b.HasKey("IDpoke", "IDability");

                    b.HasIndex("IDability");

                    b.ToTable("poke-ability", (string)null);
                });

            modelBuilder.Entity("ApiPokemon.Models.Ability", b =>
                {
                    b.Property<int>("Idability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDability");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idability"));

                    b.Property<string>("Abilityname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("abilityname");

                    b.HasKey("Idability");

                    b.ToTable("abilities", (string)null);
                });

            modelBuilder.Entity("ApiPokemon.Models.Category", b =>
                {
                    b.Property<int>("Idcat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDcat");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idcat"));

                    b.Property<string>("Category1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.HasKey("Idcat");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("ApiPokemon.Models.Egggroup", b =>
                {
                    b.Property<int>("Idegg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDegg");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idegg"));

                    b.Property<string>("Eggname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("eggname");

                    b.HasKey("Idegg");

                    b.ToTable("egggroup", (string)null);
                });

            modelBuilder.Entity("ApiPokemon.Models.Move", b =>
                {
                    b.Property<int>("Idmove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDmove");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmove"));

                    b.Property<int?>("Accuracy")
                        .HasColumnType("int")
                        .HasColumnName("accuracy");

                    b.Property<int>("Idcat")
                        .HasColumnType("int")
                        .HasColumnName("IDcat");

                    b.Property<int>("Idtype")
                        .HasColumnType("int")
                        .HasColumnName("IDtype");

                    b.Property<string>("Movename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("movename");

                    b.Property<int?>("Power")
                        .HasColumnType("int")
                        .HasColumnName("power");

                    b.Property<int?>("Pp")
                        .HasColumnType("int")
                        .HasColumnName("PP");

                    b.HasKey("Idmove");

                    b.HasIndex(new[] { "Idcat" }, "fk_moves_cat");

                    b.HasIndex(new[] { "Idtype" }, "fk_moves_type");

                    b.HasIndex(new[] { "Movename" }, "movename")
                        .IsUnique();

                    b.ToTable("moves", (string)null);
                });

            modelBuilder.Entity("ApiPokemon.Models.PokeType", b =>
                {
                    b.Property<int>("Idtype")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDtype");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idtype"));

                    b.Property<string>("Typename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("typename");

                    b.HasKey("Idtype");

                    b.ToTable("type", (string)null);
                });

            modelBuilder.Entity("ApiPokemon.Models.Pokemon", b =>
                {
                    b.Property<int>("Idpoke")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDpoke");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpoke"));

                    b.Property<int>("Attack")
                        .HasColumnType("int")
                        .HasColumnName("attack");

                    b.Property<int>("Defense")
                        .HasColumnType("int")
                        .HasColumnName("defense");

                    b.Property<bool>("Dualtype")
                        .HasColumnType("bit")
                        .HasColumnName("dualtype");

                    b.Property<int>("Hp")
                        .HasColumnType("int")
                        .HasColumnName("HP");

                    b.Property<string>("Pic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pokename")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("pokename");

                    b.Property<int>("Spattack")
                        .HasColumnType("int")
                        .HasColumnName("spattack");

                    b.Property<int>("Spdefense")
                        .HasColumnType("int")
                        .HasColumnName("spdefense");

                    b.Property<int>("Speed")
                        .HasColumnType("int")
                        .HasColumnName("speed");

                    b.HasKey("Idpoke");

                    b.HasIndex(new[] { "Pokename" }, "pokename")
                        .IsUnique();

                    b.ToTable("pokemon", (string)null);
                });

            modelBuilder.Entity("EgggroupPokemon", b =>
                {
                    b.Property<int>("IDpoke")
                        .HasColumnType("int");

                    b.Property<int>("IDegg")
                        .HasColumnType("int");

                    b.HasKey("IDpoke", "IDegg");

                    b.HasIndex("IDegg");

                    b.ToTable("poke-egg", (string)null);
                });

            modelBuilder.Entity("MovePokemon", b =>
                {
                    b.Property<int>("IDpoke")
                        .HasColumnType("int");

                    b.Property<int>("IDmove")
                        .HasColumnType("int");

                    b.HasKey("IDpoke", "IDmove");

                    b.HasIndex("IDmove");

                    b.ToTable("poke-move", (string)null);
                });

            modelBuilder.Entity("PokeTypePokemon", b =>
                {
                    b.Property<int>("IDpoke")
                        .HasColumnType("int");

                    b.Property<int>("IDtype")
                        .HasColumnType("int");

                    b.HasKey("IDpoke", "IDtype");

                    b.HasIndex("IDtype");

                    b.ToTable("poke-type", (string)null);
                });

            modelBuilder.Entity("AbilityPokemon", b =>
                {
                    b.HasOne("ApiPokemon.Models.Ability", null)
                        .WithMany()
                        .HasForeignKey("IDability")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiPokemon.Models.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("IDpoke")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiPokemon.Models.Move", b =>
                {
                    b.HasOne("ApiPokemon.Models.Category", "IdcatNavigation")
                        .WithMany("Moves")
                        .HasForeignKey("Idcat")
                        .IsRequired()
                        .HasConstraintName("fk_moves_cat");

                    b.HasOne("ApiPokemon.Models.PokeType", "IdtypeNavigation")
                        .WithMany("Moves")
                        .HasForeignKey("Idtype")
                        .IsRequired()
                        .HasConstraintName("fk_moves_type");

                    b.Navigation("IdcatNavigation");

                    b.Navigation("IdtypeNavigation");
                });

            modelBuilder.Entity("EgggroupPokemon", b =>
                {
                    b.HasOne("ApiPokemon.Models.Egggroup", null)
                        .WithMany()
                        .HasForeignKey("IDegg")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiPokemon.Models.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("IDpoke")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovePokemon", b =>
                {
                    b.HasOne("ApiPokemon.Models.Move", null)
                        .WithMany()
                        .HasForeignKey("IDmove")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiPokemon.Models.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("IDpoke")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokeTypePokemon", b =>
                {
                    b.HasOne("ApiPokemon.Models.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("IDpoke")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiPokemon.Models.PokeType", null)
                        .WithMany()
                        .HasForeignKey("IDtype")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiPokemon.Models.Category", b =>
                {
                    b.Navigation("Moves");
                });

            modelBuilder.Entity("ApiPokemon.Models.PokeType", b =>
                {
                    b.Navigation("Moves");
                });
#pragma warning restore 612, 618
        }
    }
}
